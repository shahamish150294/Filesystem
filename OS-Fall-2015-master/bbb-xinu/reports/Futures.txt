Implementation of Futures with FUTURE_EXCLUSIVE:
1. future_get(future *f, integer *value): This function will fetch the value from a valid future object and assign it to the 'value' pointer. If the future is empty, this method will block until the
future has been set with a value. Subsequent calls to a waiting future object would error out.
2. future_set(future *f, integer *value): This function will fetch the value from the 'value' pointer and assign it to the future value. The future state is then made valid. If the future was in waiting 
state, this function would signal the process , once the value has been assigned. This function would error out, if the set is called on a valid future.
3. future_alloc(int future_flag):  This function allocates memory for a future instance. Returns OK signal upon successful allocation and SYSERR upon failure.
4. future_free(future *f):  This function frees memory for a future instance. Returns OK signal upon successful deallocation and SYSERR upon failure.

As all the functions are system calls, we have implemented  interrupt processing in all the functions.
Note: The above functions forms the basis for the other future modes.

1. We have implemented two queues: one for the future 'get' requests and one for the 'set' requests. The queue has methods to enqueue and dequeue elements.

2. For the flag 'FUTURE_SHARED', threads calling get before set is called are enqueued into the get_queue. Once the set thread is called, all the get processes are dequeued and value is assigned. 

3. If the flag is 'FUTURE_QUEUE' threads calling 'future_get()' would get enqueued to 'get_queue' if no threads calling 'future set' are present. If there is a 'future set' thread enqueued, it 
   would be dequeued and the value would be set on the future after which future get retrieves the value.
   Further, threads calling future_set() would get enqueued to set_queue if no threads calling 'future get' are present in the get queue. If there is a 'future get' thread enqueued, future set would set  the value of the future and dequeue a thread from the get queue.
  
   The queue has been designed to function in a FIFO order.
   Representation of various future states for FUTURE_QUEUE:
   FUTURE_EMPTY: There are no threads waiting in both get_queue and set_queue
   FUTURE_WAITING: There are threads waiting on the get_queue
   FUTURE_VALID: There are no threads waiting on the get_queue but there are threads waiting on the set_queue